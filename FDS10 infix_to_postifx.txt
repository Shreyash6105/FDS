#include <iostream>
#include <stack>
using namespace std;

int precedence(char op) { return (op == '+' || op == '-') ? 1 : 2; }

string infixToPostfix(const string &infix) {
    stack<char> s;
    string postfix = "";
    for (char ch : infix) {
        if (isalnum(ch)) postfix += ch;
        else if (ch == '(') s.push(ch);
        else if (ch == ')') {
            while (s.top() != '(') postfix += s.top(), s.pop();
            s.pop();
        } else {
            while (!s.empty() && precedence(s.top()) >= precedence(ch)) postfix += s.top(), s.pop();
            s.push(ch);
        }
    }
    while (!s.empty()) postfix += s.top(), s.pop();
    return postfix;
}

int evaluatePostfix(const string &postfix) {
    stack<int> s;
    for (char ch : postfix) {
        if (isdigit(ch)) s.push(ch - '0');
        else {
            int b = s.top(); s.pop();
            int a = s.top(); s.pop();
            s.push(ch == '+' ? a + b : ch == '-' ? a - b : ch == '*' ? a * b : a / b);
        }
    }
    return s.top();
}

int main() {
    string infix;
    cout << "Enter infix expression: ";
    cin >> infix;
    string postfix = infixToPostfix(infix);
    cout << "Postfix expression: " << postfix << endl;
    cout << "Evaluation result: " << evaluatePostfix(postfix) << endl;
    return 0;
}